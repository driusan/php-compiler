<?php

/*
 * This file is part of PHP-Compiler, a PHP CFG Compiler for PHP code
 *
 * @copyright 2015 Anthony Ferrara. All rights reserved
 * @license MIT See LICENSE at the root of the project for more info
 */

namespace PHPCompiler\JIT\Builtin\Type;

use PHPCompiler\JIT\Builtin\Type;
use PHPCompiler\JIT\Builtin\Refcount;
use PHPCompiler\JIT\Variable;

use PHPLLVM;

class String_ extends Type {
    public PHPLLVM\Type $pointer;

    public function register(): void {
        declare {
            struct __string__ {
                __ref__ $ref;
                int64 $length;
                int8 $value;
            }
            static inline function __string__strlen(__string__*): int64;
            static inline function __string__alloc(int64): __string__*;
            static inline function __string__realloc(__string__**, int64): void;
            static inline function __string__init(int64, const char*): __string__*;
            static inline function __string__separate(__string__ *): __string__*;
        }
        $this->pointer = $this->context->getTypeFromString('__string__*');
    }

    public function implement(): void {

        $this->implementAlloc();
        $this->implementInit();
        $this->implementRealloc();
        $this->implementSeparate();
        $this->implementStrlen();
    }

    private function implementStrlen(): void {
        compile {
            function __string__strlen($string) {
                $size = $string->length;
                return $size;
            }
        }
    }

    private function implementAlloc(): void {
        compile {
            function __string__alloc($size) {
                $allocSize = $size + 1;
                $struct = malloc __string__ $size;
                $struct->length = $size;
                $char = &$struct->value;
                memset $char 0 $allocSize;
                $ref = (__ref__virtual*) $struct;
                $typeinfo = (int32) Refcount::TYPE_INFO_TYPE_STRING | Refcount::TYPE_INFO_REFCOUNTED; 
                __ref__init($typeinfo, $ref);
                return $struct;
            }
        }
    }

    private function implementInit(): void {
        compile {
            function __string__init($size, $value) {
                $result = __string__alloc($size);
                $char = &$result->value;
                memcpy $char $value $size;
                return $result;
            }
        }
    }

    private function implementRealloc(): void {
        compile {
            function __string__realloc($doublePtr, $newSize) {
                $refVirtual = (__ref__virtual**) $doublePtr;
                __ref__separate($refVirtual);
                $destVar = load $doublePtr;
                $test = $destVar == null;
                if ($test) {
                    $result = __string__alloc($newSize);
                    store $result $doublePtr;
                    return;
                }
                $oldSize = $destVar->length;

                $destValue = realloc $destVar $newSize;
                $destValue->length = $newSize;
                $char = &$destValue->value;

                $test = $newSize > $oldSize;
                if ($test) {
                    $char = &$char[$oldSize];
                    $diff = $newSize - $oldSize;
                    memset $char 0 $diff;    
                } else {
                    $char = &$char[$newSize];
                    $end = (int64) 1;
                    memset $char 0 $end;
                }
                return;
            }
        }
    }

    private function implementSeparate(): void {
        compile {
            function __string__separate($string) {
                $size = $string->length;
                $new = __string__alloc($size);
                $char = &$string->value;
                $dest = &$new->value;
                $copySize = $size + 1;
                memcpy $dest $char $copySize;
                return $new;
            }
        }
    }

    public function initialize(): void {
    }

    public function init(
        PHPLLVM\Value $dest,
        PHPLLVM\Value $value,
        PHPLLVM\Value $length,
        bool $isConstant = false
    ): void {
        compile {
            $value = (char*) $value;
            $ptr = __string__init($length, $value);
            store $ptr $dest;
        }
        if ($isConstant) {
            // disable refcount
            $this->context->refcount->disableRefcount($ptr);
        }
    }

    public function isString(PHPLLVM\Value $value): bool {
        throw new \LogicException("Unknown if it's a string due to type comparisons...");
    }

    /*
    public function size(Variable $var): \gcc_jit_rvalue_ptr {
        switch ($var->type) {
            case Variable::TYPE_STRING:

                // pointer call
                return $this->sizePtr($var->rvalue)->asRValue();
            case Variable::TYPE_NATIVE_LONG:
                return $this->context->helper->cast(
                    $this->context->helper->call(
                        'snprintf',
                        \gcc_jit_context_null($this->context->context, $this->context->getTypeFromString('char*')),
                        $this->context->constantFromInteger(0, 'size_t'),
                        $this->context->constantFromString('%lld'),
                        $var->rvalue
                    ),
                    'size_t'
                );
        }
    }
    */

    public function value(Variable $var): \gcc_jit_rvalue_ptr {
        switch ($var->type) {
            case Variable::TYPE_STRING:
                // pointer call
                return $this->valuePtr($var->rvalue);
        }
    }

    public function concat(Variable $dest, Variable $left, Variable $right): void {
        assert($dest->type === Variable::TYPE_STRING);
        if ($dest->kind === Variable::KIND_VALUE) {
            // What do do?
            throw new \LogicException("Unknown how to assign to a value");
        } else {
            $destVar = $dest->value;
        }
        $leftVar = $this->context->helper->loadValue($left);
        $rightVar = $this->context->helper->loadValue($right);

        unsigned compile {
            $leftSize = $leftVar->length;
            $rightSize = $rightVar->length;
            $size = $leftSize + $rightSize;
            __string__realloc($destVar, $size);
            $destValue = load $destVar;

            $destValue->length = $size;
            $char = &$destValue->value;
            $leftChar = &$leftVar->value;
            memcpy $char $leftChar $leftSize;

            $char = &$char[$leftSize];
            $rightChar = &$rightVar->value;
            memcpy $char $rightChar $rightSize;
        }
        $this->context->builder->store($destValue, $dest->value);
    }

    private function copy(\gcc_jit_block_ptr $block, Variable $dest, Variable $other, \gcc_jit_rvalue_ptr $offset): void {
        /*
        $addr = \gcc_jit_lvalue_get_address(
            \gcc_jit_context_new_array_access(
                $this->context->context,
                $this->context->location(),
                $this->valuePtr($dest->rvalue),
                $offset
            ),
            $this->context->location()
        );
        switch ($other->type) {
            case Variable::TYPE_STRING:
                $this->context->memory->memcpy($block, $addr, $this->valuePtr($other->rvalue), $this->sizePtr($other->rvalue)->asRValue());
                break;
            case Variable::TYPE_NATIVE_LONG:
                $this->context->helper->eval(
                    $block,
                    $this->context->helper->call(
                        'sprintf',
                        $addr,
                        $this->context->constantFromString('%lld'),
                        $other->rvalue
                    )
                );
                break;
            default:
                throw new \LogicException("Unhandled type for copy $other->type");
        }
        */
    }

    /*
    public function dimFetch(\gcc_jit_rvalue_ptr $str, \gcc_jit_rvalue_ptr $dim): \gcc_jit_rvalue_ptr {
        return \gcc_jit_lvalue_get_address(\gcc_jit_context_new_array_access(
            $this->context->context,
            $this->context->location(),
            $this->strCharConsts->asRValue(),
            $this->context->helper->cast(
                \gcc_jit_context_new_array_access(
                    $this->context->context,
                    $this->context->location(),
                    $this->valuePtr($str),
                    $this->context->helper->cast(
                        $dim,
                        'size_t'
                    )
                )->asRValue(),
                'size_t'
            )
        ), $this->context->location());
    }
    */
}
